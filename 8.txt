import mysql.connector

# Function to connect to the database
def connect_db():
    try:
        # Establishing the connection
        connection = mysql.connector.connect(
            host="localhost",
            user="root",  # Replace with your MySQL username
            password="password",  # Replace with your MySQL password
            database="employee_db"  # Replace with your database name
        )
        return connection
    except mysql.connector.Error as err:
        print(f"Error: {err}")
        return None

# Function to add a new employee
def add_employee():
    name = input("Enter employee name: ")
    position = input("Enter employee position: ")
    salary = int(input("Enter employee salary: "))
    
    connection = connect_db()
    if connection:
        cursor = connection.cursor()
        cursor.execute("INSERT INTO Employees (name, position, salary) VALUES (%s, %s, %s)", (name, position, salary))
        connection.commit()
        print("Employee added successfully.")
        cursor.close()
        connection.close()

# Function to view all employees
def view_employees():
    connection = connect_db()
    if connection:
        cursor = connection.cursor()
        cursor.execute("SELECT * FROM Employees")
        rows = cursor.fetchall()
        print("Employees List:")
        for row in rows:
            print(f"ID: {row[0]}, Name: {row[1]}, Position: {row[2]}, Salary: {row[3]}")
        cursor.close()
        connection.close()

# Function to edit employee details
def edit_employee():
    employee_id = int(input("Enter employee ID to edit: "))
    name = input("Enter new name: ")
    position = input("Enter new position: ")
    salary = int(input("Enter new salary: "))
    
    connection = connect_db()
    if connection:
        cursor = connection.cursor()
        cursor.execute("""
            UPDATE Employees
            SET name = %s, position = %s, salary = %s
            WHERE id = %s
        """, (name, position, salary, employee_id))
        connection.commit()
        print("Employee details updated successfully.")
        cursor.close()
        connection.close()

# Function to delete an employee
def delete_employee():
    employee_id = int(input("Enter employee ID to delete: "))
    
    connection = connect_db()
    if connection:
        cursor = connection.cursor()
        cursor.execute("DELETE FROM Employees WHERE id = %s", (employee_id,))
        connection.commit()
        print("Employee deleted successfully.")
        cursor.close()
        connection.close()

# Main function to navigate between operations
def main():
    while True:
        print("\nEmployee Database Operations")
        print("1. Add Employee")
        print("2. View Employees")
        print("3. Edit Employee")
        print("4. Delete Employee")
        print("5. Exit")
        
        choice = input("Enter choice (1-5): ")
        
        if choice == '1':
            add_employee()
        elif choice == '2':
            view_employees()
        elif choice == '3':
            edit_employee()
        elif choice == '4':
            delete_employee()
        elif choice == '5':
            print("Exiting program.")
            break
        else:
            print("Invalid choice! Please enter a number between 1 and 5.")

if __name__ == "__main__":
    main()









#java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;

import com.example.demo.model.User;
import com.example.demo.repository.UserRepository;

@SpringBootApplication
@Controller
public class DatabaseNavigationApp {

    @Autowired
    private UserRepository userRepository;

    public static void main(String[] args) {
        SpringApplication.run(DatabaseNavigationApp.class, args);
    }

    // Route for the main page
    @GetMapping("/")
    public String index(Model model) {
        model.addAttribute("users", userRepository.findAll());
        return "index";
    }

    // Route for adding a new user
    @GetMapping("/add")
    public String addUserForm(Model model) {
        model.addAttribute("user", new User());
        return "add";
    }

    @PostMapping("/add")
    public String addUser(@ModelAttribute("user") User user) {
        userRepository.save(user);
        return "redirect:/";
    }

    // Route for deleting a user
    @GetMapping("/delete/{id}")
    public String deleteUser(@PathVariable("id") Long id) {
        userRepository.deleteById(id);
        return "redirect:/";
    }

    // Route for editing a user
    @GetMapping("/edit/{id}")
    public String editUserForm(@PathVariable("id") Long id, Model model) {
        User user = userRepository.findById(id).orElseThrow(() -> new IllegalArgumentException("Invalid user ID: " + id));
        model.addAttribute("user", user);
        return "edit";
    }

    @PostMapping("/edit/{id}")
    public String editUser(@PathVariable("id") Long id, @ModelAttribute("user") User updatedUser) {
        User user = userRepository.findById(id).orElseThrow(() -> new IllegalArgumentException("Invalid user ID: " + id));
        user.setName(updatedUser.getName());
        user.setEmail(updatedUser.getEmail());
        userRepository.save(user);
        return "redirect:/";
    }
}

// 1. Find the names and cities of residence of all employees who work for "First Bank Corporation".
db.works.aggregate([
  {
    $match: { company_name: "First Bank Corporation" }
  },
  {
    $lookup: {
      from: "employee",
      localField: "employee_name",
      foreignField: "employee_name",
      as: "employee_details"
    }
  },
  {
    $unwind: "$employee_details"
  },
  {
    $project: {
      "employee_name": "$employee_details.employee_name",
      "city": "$employee_details.city"
    }
  }
]);

// 2. Find all employees in the database who live in the same cities as the companies for which they work.
db.works.aggregate([
  {
    $lookup: {
      from: "company",
      localField: "company_name",
      foreignField: "company_name",
      as: "company_details"
    }
  },
  {
    $unwind: "$company_details"
  },
  {
    $match: {
      $expr: {
        $eq: ["$city", "$company_details.city"]
      }
    }
  },
  {
    $lookup: {
      from: "employee",
      localField: "employee_name",
      foreignField: "employee_name",
      as: "employee_details"
    }
  },
  {
    $unwind: "$employee_details"
  },
  {
    $project: {
      "employee_name": "$employee_details.employee_name",
      "city": "$employee_details.city"
    }
  }
]);

// 3. Find all employees in the database who do not work for "First Bank Corporation".
db.works.aggregate([
  {
    $match: { company_name: { $ne: "First Bank Corporation" } }
  },
  {
    $lookup: {
      from: "employee",
      localField: "employee_name",
      foreignField: "employee_name",
      as: "employee_details"
    }
  },
  {
    $unwind: "$employee_details"
  },
  {
    $project: {
      "employee_name": "$employee_details.employee_name"
    }
  }
]);

// 4. Find all companies located in every city in which "Small Bank Corporation" is located.
db.company.aggregate([
  {
    $match: { company_name: "Small Bank Corporation" }
  },
  {
    $project: { city: 1 }
  }
]).forEach(function(smallBankCities) {
  db.company.aggregate([
    {
      $match: {
        city: { $in: smallBankCities.map(city => city.city) }
      }
    },
    {
      $group: {
        _id: "$company_name",
        cities: { $addToSet: "$city" }
      }
    },
    {
      $match: {
        $expr: {
          $eq: [{ $size: "$cities" }, smallBankCities.length]
        }
      }
    },
    {
      $project: {
        company_name: "$_id"
      }
    }
  ]);
});

// 5. Find the company that has the most employees.
db.works.aggregate([
  {
    $group: {
      _id: "$company_name",
      employee_count: { $sum: 1 }
    }
  },
  {
    $sort: { employee_count: -1 }
  },
  {
    $limit: 1
  },
  {
    $project: {
      "company_name": "$_id",
      "employee_count": 1
    }
  }
]);

// 6. Find those companies whose employees earn a higher salary, on average, than the average salary at "First Bank Corporation".
db.works.aggregate([
  {
    $match: { company_name: "First Bank Corporation" }
  },
  {
    $group: {
      _id: "$company_name",
      avg_salary: { $avg: "$salary" }
    }
  }
]).forEach(function(firstBankAvg) {
  db.works.aggregate([
    {
      $group: {
        _id: "$company_name",
        avg_salary: { $avg: "$salary" }
      }
    },
    {
      $match: {
        avg_salary: { $gt: firstBankAvg.avg_salary }
      }
    },
    {
      $project: {
        company_name: "$_id",
        avg_salary: 1
      }
    }
  ]);
});
